package aspose.omr.cloud.sdk.java;

import aspose.omr.cloud.sdk.api.ApiClient;
import aspose.omr.cloud.sdk.api.RecognizeTemplate;
import aspose.omr.cloud.sdk.models.OMRResponse;
import aspose.omr.cloud.sdk.models.OmrRecognizeTask;

import com.sun.jersey.core.util.Base64;

import org.apache.commons.io.IOUtils;
import org.testng.Assert;
import org.junit.Test;

import java.io.InputStream;
import java.net.URL;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class RecognizeTemplateTest {

    @Test
    public void RecognizeTemplateTest() throws Exception {
        try {

            ApiClient apiClient = new ApiClient();
            RecognizeTemplate api = new RecognizeTemplate(apiClient);

            // get the omr file
            //byte[] omrFile = FileUtils.readFileToByteArray(Paths.get(common.GetResultFolderDir(), "Aspose_test.omr").toAbsolutePath().toFile());
            // set up recognition threshold
            int recognitionThreshold = 30;

            // get the filled template
            //byte[] image = FileUtils.readFileToByteArray(Paths.get(common.GetDataFolderDir(), "Aspose_test.jpg").toAbsolutePath().toFile());
            ClassLoader classLoader = this.getClass().getClassLoader();

            //URL resource = classLoader.getResource("res/Aspose_test.Jpg");
            InputStream in = this.getClass().getClassLoader().getResourceAsStream("Aspose_test.Jpg");
            byte[] bytes = IOUtils.toByteArray(in);

            List<String> images = new ArrayList<>();
            images.add(new String(Base64.encode(bytes)));
            // Set up request
            OmrRecognizeTask task = new OmrRecognizeTask();
            task.setOmrFile(new String(""));
            task.setRecognitionThreshold(recognitionThreshold);
            task.setImages(images);

            String templateId = api.postRecognizeTemplate(task);

            Assert.assertEquals(templateId.isEmpty(),false);

            OMRResponse recognitionResult = new OMRResponse();

            while (true) {
                recognitionResult = api.getRecognizeTemplate(templateId);

                if (recognitionResult.getResponseStatusCode().getValue() == "Ok") {
                    break;
                }

                System.out.println("Wait, please! Your request is still being processed");
                TimeUnit.SECONDS.sleep(5);
            }

            Assert.assertEquals(recognitionResult.getResponseStatusCode().getValue(),"Ok");
            Assert.assertEquals(recognitionResult.getResults().size()>0,true);
            Assert.assertEquals(recognitionResult.getError(),null);

        }catch (Exception e){
            System.out.println(e.getMessage());
        }

    }

}